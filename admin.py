from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from database import Application, AsyncSessionLocal
from logger import error_logger

admin_router = Router()


class RejectReason(StatesGroup):
    waiting_for_reason = State()
    application_id = State()


@admin_router.callback_query(F.data.startswith("accept_"))
async def accept_application(callback: CallbackQuery):
    app_id = int(callback.data.split("_")[1])

    async with AsyncSessionLocal() as session:
        application = await session.get(Application, app_id)
        if not application:
            return await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

        if application.status != "–Ω–æ–≤–∞—è":
            return await callback.answer(
                "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True
            )

        application.status = "–ø—Ä–∏–Ω—è—Ç–∞"
        await session.commit()

    try:
        await callback.bot.send_message(
            application.user_id,
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.",
        )
    except Exception as e:
        error_logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {application.user_id} –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application.id}: {e}"
        )

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
    await callback.message.edit_reply_markup(reply_markup=None)


@admin_router.callback_query(F.data.startswith("reject_"))
async def reject_application(callback: CallbackQuery, state: FSMContext):
    app_id = int(callback.data.split("_")[1])

    async with AsyncSessionLocal() as session:
        application = await session.get(Application, app_id)
        if not application:
            return await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

        if application.status != "–Ω–æ–≤–∞—è":
            return await callback.answer(
                "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True
            )

    await state.update_data(application_id=app_id)
    await state.set_state(RejectReason.waiting_for_reason)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ‚Ññ{app_id}:")
    await callback.answer()


@admin_router.message(RejectReason.waiting_for_reason)
async def process_reject_reason(message: Message, state: FSMContext):
    reason = message.text
    data = await state.get_data()
    app_id = data.get("application_id")

    async with AsyncSessionLocal() as session:
        application = await session.get(Application, app_id)
        if not application:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            await state.clear()
            return

        application.status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        application.admin_comment = reason
        await session.commit()

    try:
        await message.bot.send_message(
            application.user_id,
            f"‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>\n"
            f"üìã <i>–ü—Ä–∏—á–∏–Ω–∞:</i> {reason}",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove(),
        )
    except Exception as e:
        error_logger.error(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {application.user_id} –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application.id}: {e}"
        )

    await message.answer(f"–ó–∞—è–≤–∫–∞ ‚Ññ{application.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
    await state.clear()
