import re

from aiogram import Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from config import ADMIN_CHAT_IDS
from database import Application, AsyncSessionLocal
from logger import error_logger, logger
from states import Form
from utils import is_non_empty, validate_email, validate_tg_account

router = Router()

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)


async def save_application(data: dict, user: types.User):
    async with AsyncSessionLocal() as session:
        app = Application(
            user_id=user.id,
            username=user.username or "",
            request_type=data.get("request_type", ""),
            name=data.get("name", ""),
            phone=data.get("phone", ""),
            description=data.get("description", ""),
            email=data.get("email", ""),
            tg_account=data.get("tg_account", ""),
            status="–Ω–æ–≤–∞—è",
        )
        session.add(app)
        await session.commit()
        await session.refresh(app)
        return app


async def notify_admin_about_application(bot, application: Application):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{application.id}"
                ),
                InlineKeyboardButton(
                    text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{application.id}"
                ),
            ]
        ]
    )
    text = (
        f"üì© –ó–∞—è–≤–∫–∞ ‚Ññ{application.id}\n"
        f"<b>–¢–∏–ø</b>: {application.request_type}\n"
        f"<b>–ò–º—è</b>: {application.name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {application.phone}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {application.description}\n"
        f"<b>E-mail</b>: {application.email}\n"
        f"<b>Telegram</b>: {application.tg_account}\n"
        f"<b>–°—Ç–∞—Ç—É—Å</b>: {application.status}\n"
    )
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(
                chat_id=admin_id, text=text, parse_mode="HTML", reply_markup=markup
            )
        except Exception as e:
            error_logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}"
            )


@router.message(lambda m: m.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –≤–∏–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def start_paid_consult(message: types.Message, state: FSMContext):
    try:
        await state.update_data(request_type="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –≤–∏–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
        await state.set_state(Form.waiting_for_name_paid)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ start_paid_consult –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_name_paid))
async def process_name(message: types.Message, state: FSMContext):
    try:
        name = message.text.strip()
        if not is_non_empty(name):
            await message.answer("‚ö†Ô∏è –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return
        await state.update_data(name=name)
        await message.answer(
            "üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ñ–æ—Ä–º–∞—Ç: +79XXXXXXXXX):"
        )
        await state.set_state(Form.waiting_for_phone_paid)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_phone_paid))
async def process_phone(message: types.Message, state: FSMContext):
    try:
        phone = message.text.strip()
        if not re.fullmatch(r"\+79\d{9}", phone):
            await message.answer(
                "‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79XXXXXXXXX –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑:"
            )
            return
        await state.update_data(phone=phone)
        await message.answer("üí¨ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É/–≤–æ–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
        await state.set_state(Form.waiting_for_description_paid)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_phone –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_description_paid))
async def process_description(message: types.Message, state: FSMContext):
    try:
        description = message.text.strip()
        if not is_non_empty(description):
            await message.answer(
                "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:"
            )
            return
        await state.update_data(description=description)
        await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
        await state.set_state(Form.waiting_for_email_paid)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_description –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_email_paid))
async def process_email(message: types.Message, state: FSMContext):
    try:
        email = message.text.strip()
        if not validate_email(email):
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail, –Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru"
            )
            return
        await state.update_data(email=email)
        await message.answer(
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @):"
        )
        await state.set_state(Form.waiting_for_tg_account_paid)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_tg_account_paid))
async def process_tg_account(message: types.Message, state: FSMContext):
    try:
        tg_account = message.text.strip()
        if not validate_tg_account(tg_account):
            await message.answer(
                "‚ö†Ô∏è Telegram –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ '_'. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        await state.update_data(tg_account=tg_account)
        await message.answer(
            "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥:\n–ù–∞–ø–∏—à–∏—Ç–µ ¬´—Å–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª."
        )
        await state.set_state(Form.waiting_for_paid_agreement)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_tg_account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_paid_agreement))
async def process_paid_agreement(message: types.Message, state: FSMContext):
    try:
        answer = message.text.lower()
        if answer not in ["—Å–æ–≥–ª–∞—Å–µ–Ω", "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´—Å–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª.")
            return
        if answer == "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
            await message.answer(
                "‚ö†Ô∏è –î–ª—è –ø–ª–∞—Ç–Ω–æ–π –≤–∏–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥. –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
            return
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏"
        )

        data = await state.get_data()
        confirm_text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏.\n\n"
            "<b>–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {data.get('name')}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n"
            f"üí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description')}\n"
            f"‚úâÔ∏è <b>E-mail:</b> {data.get('email')}\n"
            f"üì± <b>Telegram:</b> {data.get('tg_account')}\n\n"
            "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π "
            "<a href='https://p-d.tel/person_data/'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>.\n\n"
            "‚úÖ –ù–∞–ø–∏—à–∏—Ç–µ ¬´—Å–æ–≥–ª–∞—Å–µ–Ω¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ¬´–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏."
        )
        await message.answer(confirm_text, parse_mode="HTML")
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –ø–æ–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º"
        )
        await state.set_state(Form.waiting_for_personal_data_agreement_paid)
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_paid_agreement –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(StateFilter(Form.waiting_for_personal_data_agreement_paid))
async def personal_data_agreement(message: types.Message, state: FSMContext):
    try:
        answer = message.text.lower()
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª '{answer}' –Ω–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        )

        if answer not in ["—Å–æ–≥–ª–∞—Å–µ–Ω", "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´—Å–æ–≥–ª–∞—Å–µ–Ω¬ª –∏–ª–∏ ¬´–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω¬ª.")
            return
        if answer == "–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
            await message.answer(
                "‚ö†Ô∏è –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
            return

        data = await state.get_data()
        app = await save_application(data, message.from_user)
        await notify_admin_about_application(message.bot, app)

        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ ‚Ññ{app.id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞!</b>\n\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove(),
        )

        await state.clear()
    except Exception as e:
        error_logger.error(
            f"–û—à–∏–±–∫–∞ –≤ personal_data_agreement –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}",
            exc_info=True,
        )
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
