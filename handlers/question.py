import json
import logging

from aiogram import F, Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from sqlalchemy import select

from config import ADMIN_CHAT_IDS, GROUP_ID
from database import (
    AsyncSessionLocal,
    Question,
    create_question,
    update_question_answer,
)
from states import Form
from storage import bot
from utils import is_non_empty

logging.basicConfig(level=logging.INFO)
router = Router()

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

MAX_TELEGRAM_MSG_LENGTH = 4096

admin_actions_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)


def split_text(text: str):
    return [text[i:i + MAX_TELEGRAM_MSG_LENGTH] for i in range(0, len(text), MAX_TELEGRAM_MSG_LENGTH)]


async def send_answer_to_group(question_text: str, answer_text: str):
    group_message_prefix = (
        "–†—É–±—Ä–∏–∫–∞ #–∞–Ω–æ–Ω–∏–º–Ω—ã–µ_–≤–æ–ø—Ä–æ—Å—ã_–ø—Å–∏—Ö–æ–ª–æ–≥—É.\n\n"
        "–°–µ–≥–æ–¥–Ω—è –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –Ω–∞—à–µ–π —Ä—É–±—Ä–∏–∫–µ.\n\n"
        f"üü¢ <b>–í–æ–ø—Ä–æ—Å, –∞–Ω–æ–Ω–∏–º–Ω–æ:</b> {question_text}\n\n"
        f"üü¢ <b>–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:</b>\n\n"
    )

    full_message = group_message_prefix + answer_text
    message_parts = split_text(full_message)

    for part in message_parts:
        await bot.send_message(chat_id=GROUP_ID, text=part, parse_mode="HTML")


@router.message(lambda m: m.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É")
async def start_question(message: types.Message, state: FSMContext):
    await state.update_data(request_type="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É")
    await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await state.set_state(Form.waiting_for_question)


@router.message(StateFilter(Form.waiting_for_question))
async def process_question(message: types.Message, state: FSMContext):
    question = message.text.strip()
    if not is_non_empty(question):
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        return
    await state.update_data(question=question)
    preview_text = (
        "üìã <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†</b>\n\n"
        "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è\n"
        "üí≠ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
        f"<i>¬´{question}¬ª</i>\n"
        "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è\n\n"
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"
    )
    await message.answer(preview_text, parse_mode="HTML", reply_markup=yes_no_kb)
    await state.set_state(Form.waiting_for_personal_data_agreement_question)


@router.message(StateFilter(Form.waiting_for_personal_data_agreement_question))
async def personal_data_agreement(message: types.Message, state: FSMContext):
    answer = message.text.lower()
    if answer == "/cancel":
        await state.clear()
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return
    if answer not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=yes_no_kb
        )
        return
    if answer == "–Ω–µ—Ç":
        await message.answer(
            "‚ö†Ô∏è –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∑–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()
        return

    data = await state.get_data()
    question_text = data.get("question")
    user_id = message.from_user.id

    notification_text = (
        f"üÜï –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\n"
        f"<b>‚ùì –í–û–ü–†–û–°:</b>\n"
        f"<i>¬´{question_text}¬ª</i>\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É."
    )

    admin_messages = []
    for admin_id in ADMIN_CHAT_IDS:
        sent_message = await bot.send_message(
            admin_id, notification_text, parse_mode="HTML"
        )
        admin_messages.append(
            {"admin_id": admin_id, "message_id": sent_message.message_id}
        )

    question_id = await create_question(
        user_id=user_id, question_text=question_text, admin_message_id=None
    )

    async with AsyncSessionLocal() as session:
        question = await session.get(Question, question_id)
        question.admin_messages = json.dumps(admin_messages)
        await session.commit()

    first_admin_msg = admin_messages[0]
    notification_text_with_id = (
        f"üÜï –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id}\n\n"
        f"<b>‚ùì –í–û–ü–†–û–°:</b>\n"
        f"<i>¬´{question_text}¬ª</i>\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É."
    )

    await bot.edit_message_text(
        chat_id=first_admin_msg["admin_id"],
        message_id=first_admin_msg["message_id"],
        text=notification_text_with_id,
        parse_mode="HTML",
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ù–∞—à–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã-–ø—Å–∏—Ö–æ–ª–æ–≥–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω - –º—ã –í–∞—Å —Å—Ä–∞–∑—É –∂–µ —É–≤–µ–¥–æ–º–∏–º.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()


@router.message(F.reply_to_message)
async def handle_admin_reply(message: types.Message, state: FSMContext):
    replied_message = message.reply_to_message
    if replied_message.from_user.id != (await bot.get_me()).id:
        return

    admin_id = message.from_user.id
    admin_message_id = replied_message.message_id

    question = await get_question_by_admin_and_message(admin_id, admin_message_id)
    if not question:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if question.status == "–∑–∞–≤–µ—Ä—à–µ–Ω":
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–≤–µ—Ç–∏—Ç—å –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    await state.update_data(
        question_id=question.id,
        user_id=question.user_id,
        question_text=question.question_text,
        current_answer=message.text,
        admin_message_id=admin_message_id
    )

    await message.answer(
        f"üìù <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ{question.id}</b>\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {question.question_text}\n\n"
        f"üí¨ –í–∞—à –æ—Ç–≤–µ—Ç ({len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤) –≥–æ—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=admin_actions_kb
    )

    await state.set_state(Form.waiting_for_admin_action)


@router.message(StateFilter(Form.waiting_for_admin_action))
async def handle_admin_action(message: types.Message, state: FSMContext):
    action = message.text
    data = await state.get_data()

    question_id = data.get("question_id")
    user_id = data.get("user_id")
    question_text = data.get("question_text")
    current_answer = data.get("current_answer")

    if action == "üìù –û—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑":
        await message.answer(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.waiting_for_additional_answer)

    elif action == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç":
        preview_answer = current_answer[:1000] + "..." if len(current_answer) > 1000 else current_answer

        await message.answer(
            f"‚úèÔ∏è <b>–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç</b> ({len(current_answer)} —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            f"{preview_answer}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞:",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.waiting_for_edited_answer)

    elif action == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        await send_answer_to_group(question_text, current_answer)

        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
        )

        await update_question_answer(question_id, current_answer, status="–∑–∞–≤–µ—Ä—à–µ–Ω")

        await message.answer(
            f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{question_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )

        await state.clear()

    elif action == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=admin_actions_kb
        )


@router.message(StateFilter(Form.waiting_for_additional_answer))
async def handle_additional_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_answer = data.get("current_answer", "")
    new_answer = message.text

    combined_answer = current_answer + "\n\n" + new_answer

    await state.update_data(current_answer=combined_answer)

    await message.answer(
        f"üìù <b>–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(combined_answer)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=admin_actions_kb
    )

    await state.set_state(Form.waiting_for_admin_action)


@router.message(StateFilter(Form.waiting_for_edited_answer))
async def handle_edited_answer(message: types.Message, state: FSMContext):
    await state.update_data(current_answer=message.text)

    preview_answer = message.text[:500] + "..." if len(message.text) > 500 else message.text

    await message.answer(
        f"‚úèÔ∏è <b>–û—Ç–≤–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n{preview_answer}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=admin_actions_kb
    )

    await state.set_state(Form.waiting_for_admin_action)


async def get_question_by_admin_and_message(admin_id: int, message_id: int):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Question))
        questions = result.scalars().all()
        for q in questions:
            if q.admin_messages:
                admin_msgs = json.loads(q.admin_messages)
                for admin_msg in admin_msgs:
                    if (
                            admin_msg["admin_id"] == admin_id
                            and admin_msg["message_id"] == message_id
                    ):
                        return q
    return None