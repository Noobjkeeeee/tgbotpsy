import json
import logging

from aiogram import F, Router, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from sqlalchemy import select

from bot.config import ADMIN_CHAT_IDS, GROUP_ID
from bot.database import (
    AsyncSessionLocal,
    Question,
    create_question,
    update_question_answer,
)
from bot.states import Form
from bot.storage import bot
from bot.utils import is_non_empty

logging.basicConfig(level=logging.INFO)
router = Router()

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)


@router.message(lambda m: m.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É")
async def start_question(message: types.Message, state: FSMContext):
    await state.update_data(request_type="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥—É")
    await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await state.set_state(Form.waiting_for_question)


@router.message(StateFilter(Form.waiting_for_question))
async def process_question(message: types.Message, state: FSMContext):
    question = message.text.strip()
    if not is_non_empty(question):
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
        )
        return
    await state.update_data(question=question)
    preview_text = (
        "üìã <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†</b>\n\n"
        "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è\n"
        "üí≠ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
        f"<i>¬´{question}¬ª</i>\n"
        "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è\n\n"
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"
    )
    await message.answer(preview_text, parse_mode="HTML", reply_markup=yes_no_kb)
    await state.set_state(Form.waiting_for_personal_data_agreement_question)


@router.message(StateFilter(Form.waiting_for_personal_data_agreement_question))
async def personal_data_agreement(message: types.Message, state: FSMContext):
    answer = message.text.lower()
    if answer == "/cancel":
        await state.clear()
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        return
    if answer not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=yes_no_kb
        )
        return
    if answer == "–Ω–µ—Ç":
        await message.answer(
            "‚ö†Ô∏è –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∑–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()
        return

    data = await state.get_data()
    question_text = data.get("question")
    user_id = message.from_user.id

    notification_text = (
        f"üÜï –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\n"
        f"<b>‚ùì –í–û–ü–†–û–°:</b>\n"
        f"<i>¬´{question_text}¬ª</i>\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É."
    )

    admin_messages = []
    for admin_id in ADMIN_CHAT_IDS:
        sent_message = await bot.send_message(
            admin_id, notification_text, parse_mode="HTML"
        )
        admin_messages.append(
            {"admin_id": admin_id, "message_id": sent_message.message_id}
        )

    question_id = await create_question(
        user_id=user_id, question_text=question_text, admin_message_id=None
    )

    async with AsyncSessionLocal() as session:
        question = await session.get(Question, question_id)
        question.admin_messages = json.dumps(admin_messages)
        await session.commit()

    first_admin_msg = admin_messages[0]
    notification_text_with_id = (
        f"üÜï –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Ññ{question_id}\n\n"
        f"<b>‚ùì –í–û–ü–†–û–°:</b>\n"
        f"<i>¬´{question_text}¬ª</i>\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É."
    )

    await bot.edit_message_text(
        chat_id=first_admin_msg["admin_id"],
        message_id=first_admin_msg["message_id"],
        text=notification_text_with_id,
        parse_mode="HTML",
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ù–∞—à–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã-–ø—Å–∏—Ö–æ–ª–æ–≥–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω - –º—ã –í–∞—Å —Å—Ä–∞–∑—É –∂–µ —É–≤–µ–¥–æ–º–∏–º.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()


@router.message(F.reply_to_message)
async def handle_admin_reply(message: types.Message):
    replied_message = message.reply_to_message
    if replied_message.from_user.id != (await bot.get_me()).id:
        return

    admin_id = message.from_user.id
    admin_message_id = replied_message.message_id

    question = await get_question_by_admin_and_message(admin_id, admin_message_id)
    if not question or question.status != "–æ–∂–∏–¥–∞–µ—Ç":
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    user_id = question.user_id
    question_text = question.question_text
    answer_text = message.text

    group_message = (
        "–†—É–±—Ä–∏–∫–∞ #–∞–Ω–æ–Ω–∏–º–Ω—ã–µ_–≤–æ–ø—Ä–æ—Å—ã_–ø—Å–∏—Ö–æ–ª–æ–≥—É.\n\n"
        "–°–µ–≥–æ–¥–Ω—è –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –Ω–∞—à–µ–π —Ä—É–±—Ä–∏–∫–µ.\n\n"
        f"üü¢ <b>–í–æ–ø—Ä–æ—Å, –∞–Ω–æ–Ω–∏–º–Ω–æ:</b> {question_text}\n\n"
        f"üü¢ <b>–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:</b> {answer_text}\n\n"
        '<i>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram @My_DialogueBot –ª–∏–±–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –í–∫–æ–Ω—Ç–∞–∫—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ". '
        "–ù–∞—à–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ —Ä–∞–∑–±–µ—Ä—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–ø—É–±–ª–∏–∫—É—é—Ç –æ—Ç–≤–µ—Ç—ã –∑–¥–µ—Å—å –∏ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ. "
        "–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        "#–ü—Ä—è–ú–æ–π–î–∏–∞–ª–æ–≥\n"
        "#—Ç–µ–ª–µ—Ñ–æ–Ω_–ø–æ–¥–¥–µ—Ä–∂–∫–∏ #–≥—Ä—É–ø–ø—ã_–ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "#–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è_–ø–æ–º–æ—â—å_–º—É–∂—á–∏–Ω–∞–º #–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è\n"
        "#–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è_–º—É–∂—á–∏–Ω–∞–º\n"
        "#–∞–Ω–æ–Ω–∏–º–Ω—ã–µ_–≤–æ–ø—Ä–æ—Å—ã_–ø—Å–∏—Ö–æ–ª–æ–≥—É</i>"
    )

    await bot.send_message(chat_id=GROUP_ID, text=group_message, parse_mode="HTML")

    await bot.send_message(
        chat_id=user_id, text="‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
    )

    await update_question_answer(question.id, answer_text)

    await message.answer(
        f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{question.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω."
    )


async def get_question_by_admin_and_message(admin_id: int, message_id: int):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Question))
        questions = result.scalars().all()
        for q in questions:
            if q.admin_messages:
                admin_msgs = json.loads(q.admin_messages)
                for admin_msg in admin_msgs:
                    if (
                        admin_msg["admin_id"] == admin_id
                        and admin_msg["message_id"] == message_id
                    ):
                        return q
    return None
